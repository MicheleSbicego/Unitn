
PRIMA LEZIONE
=============

CAPOPROGETTO: ha il compito di portare i risultato nei modi e nei tempi previsti. Usa il 
DIAGRAMMA DI GANTT. E' lo strumento che tiene aggiornato e grazie a cui ha sempre la visione dello stato di sviluppo del software.

SECONDA LEZIONE
===============

ANALISI DEI REQUISITI. cosa vuol dire? Quali strumenti ha l'ingegneria del software?
L'analisi dei requisiti avviene DOPO il diagramma di Gantt, quando si pianifica.
Oggi vedremo cosa vuol dire fare analisi dei requisiti nella pratica.

Il capo progetto gestisce il diagramma di Gantt.

ANALISTA: è la persona che si occupa di fare analisi dei requisiti.
Nei progetti medi piccoli (6-8 mesi, meno di un anno) di solito il capo progetto fa anche l'analista.

[mercoledì non c'è lezione]

ANALISI DEI REQUISITI: cosa vuol dire? Vuol dire definire la lista della spesa, cioè cosa fa il software. Definisce COSA fa il software (non il COME). Per gli informatici è difficile capire COSA, perchè pensano subito al COME, non si concentrano sul COSA ma pensano subito al COME. Bisogna invece concentrarsi solo su COSA deve fare il sistema. Bisogna dimenticarci del COME farlo.
Al COME ci si penserà in fase di design.

Documento: normalmente i requisiti vengono collezionati in un documento. Ci sono due tipi di requisiti:
- funzionali: vengono dati dal cliente,
- non funzionali: dobbiamo identificarli da soli.

Noi in questo momento ci concentriamo su questo elenco dei requisiti, ma in realtà la fase di analisi dei requisiti è molto più complessa.
Useremo due tipi di diagrammi di UML:
- Use Case Diagram,
- Sequence Diagram.
Usare questi diagrammi facilita l'analisi dei requisiti, rispetto all'uso di editor di testo tipo Word.

DIAGRAMMI UML. Sono di due tipi:
- statici: non c'è il tempo,
- dinamici: c'è il tempo.
Ogni tipo di diagramma supporta una certa fase dello sviluppo del software.

USE CASE DIAGRAM (E SEQUENCE): per requisiti funzionali.

DIAGRAMMI PER LE CLASSI (E STATE, ACTIVITY): per il design.

USE CASE DIAGRAM
----------------

Serve per descrivere i requisiti.

USE CASE: rappresenta gli scenari possibili.

SCENARIO: una funzionalità (requisito) del sistema visto dal punto di vista dell'utente del sistema. E' una COSA che fa il sistema vista dal punto di vista dell'utente finale, non dal nostro punto di vista.

ATTORE: gli oggetti che interagiscono col nostro sistema.

USE CASE DIAGRAM: tutte le cose precedenti messe assieme.

ESEMPIO: vogliamo definire un TIME TRACKER.
L'attività di creazione dello use case diagram si divide in passi.

1. Definire gli attori.
Attore: chiunque o qualunque cosa che interagisca col nostro sistema.
Definire i privilegi degli utenti umani e non umani.

2. Definire gli use case.
Use case: scenari, funzionalità, funzioni dal punto di vista del COSA.
Trucchi: per definire le necessità degli attori si trovano i verbi all'interno del testo dato dal cliente.

3. Definire le relazioni.
Definire CHI (attori) fa CHE COSA (funzionalità).

Fatto: tipicamente, questo diagramma UML è l'unico diagramma UML che vedrà l'utente finale.
Questo diagramma UML costituisce il documento dei requisiti.

Puntualizzazioni: gli attori non defono essere per forza persone umane. Gli attori rappresentano ruoli e non istanze. 20 impiegati costituiscono un attore, non 20 attori.

[IBM Rational Software Architect: useremo questo software per creare diagrammi UML. MEglio usare Windows perchè la versione per Linux non è completa]

ESEMPIO: automatizzare l'ordine e la fatturazione delle attività di un ristorante. Tutti i camerieri hanno un palmare. Il palmare invia ordini alla cucina e al cassiere, riceve disponibilità di menù dalla cucina. Una volta pizzato l'ordine, l'ordine può essere cambiato dal cliente entro 5 minuti o entro un timeout stabilito dal cuoco. Il sistema gestisce anche la gestione dei tavoli. La prenotazione può essere fatta per telefono o via internet.

Seguo questi passi:

1. elenco gli attori,
2. elenco delle funzionalità,
3. collegamento tra attori e funzionalità.

Note: i pallini (cioè gli use case) sono le attività che deve fare il PROGRAMMA, non gli utenti.
Se l'attore esterno è il cameriere, dobbiamo prenderci in carico anche la costruzione del palmare. Se l'attore esterno è il palmare, allora dobbiamo fare solo il software PER un palmare, il palmare non ci riguarda.
Gli USE CASE sono miei e devo gestirli, gli aTTORI sono esterni e non mi riguardano (devo solo relazionarmi con loro, ma non implementarli).

"Prenotare un tavolo" è troppo generico, per l'ingegneria del software uno use case così è un incubo. Va dettagliato meglio cosa vuol dire "prenotare un tavolo".
Chi è che prenota il tavolo all'interno del sistema? Il cliente o il cassiere? Se il cliente telefona è il cassiere, NON il cliente.
Inoltre, la prenotazione può avvenire anche con sistemi molto complicati, per esempio il riconoscimento vocale telefonico, che ha un effort enorme: quindi bisogna chiarire cosa si  intende PRIMA di firmare il contratto.

Documentazione: ogni USE CASE in UML ha una voce "documentazione", in cui si possono chiarire eventuali use case particolarmente critici. Si usa molto poco, si cerca di usare il meno possibile. Ci sono vari standard, ma non c'è una regola generale.

Use Case: consigli:
- nel nome dell'etichetta deve esserci sempre un verbo,
- nel nome non bisogna andare troppo nel dettaglio,
- cerchiamo di compattare gli user case, per non averne troppi.

RELAZIONI
Associazione: tra attore e user case.
Generalizzazione: tra attore e attore. A -> B vuol dire che A può fare tutte le cose che può fare B. Cioè A estende B, A generalizza B.
Inclusione, estensione: tra use case.
Generalizzazione tra use case: tra use case, poco usato.

ESERCIZIO: un cinema multisala. Prenotazione dei posti. L'utente può comprare sia biglietti sia abbonamenti. Anche per telefono. Pagamento in contanti o con carta di credito. Un supervisore può stampare lo stato di vendite di un particolare show. Una segretaria aggiorna la lista degli show disponibili.

TERZA LEZIONE
=============

IBM: c'è un contest a cui si puo' partecipare. Non è necessario avere esperienza. Riguarda l'ingegneria del software.

Consiglio: fare gli esercizi di volta in volta durante le lezioni. Tool consigliato: IBM RSA su Windows.

Esercizio: torniamo all'esercizio del mustisala.
Proponiamo tre diverse soluzioni.

SOLUZIONE 1.
Ci sono 3 attori: casher, secretary, supervisor. Ci sono vari use case, cioè i requisiti funzionali del sistema. Gli attori si relazionano col sistema attraverso use case.
Abbiamo seguito alla lettera il testo dell'esercizio: abbiamo trovato i verbi e i verbi sono gli use case del diagramma. Questa è una soluzione molto base.
Nota: dato questo diagramma, l'espressione "also by phone", visto che manca l'attore user, viene implementata come? Il cliente telefona al cassiere e il cassiere fa. L'utente non interagisce col sistema.
Nota: un attore deve esserci sono se interagisce col sistema.

Esame: 2 domande di teoria. 2 domande di laboratorio (di cui 1 è fare uno use case diagram)

SOLUZIONE 2.
E' come la 1, ma è comparso l'attore user.
Lo user puo' telefonare. Questo cosa implica? Lo user non telefona al cassiere, ma al sistema stesso. Come si fa? Cavoli nostri. La cosa piu' semplice è usare i tastierini numerici, oppure si puo' creare un sintetizzatore vocale, eccetera.

SOLUZIONE 3.
Avere "buy ticket" vuol dire gestire anche il pagamento. In questa soluzione, per il pagamento si chiama il causa il servizio VISA, per l'uso della carta di credito. Non gestisco direttamente io il pagamento, ma interagento con VISA.

SUGGERIMENTI.
Attori: deve essere fuori dal sistema, servono per definire i confini del sistema, non deve esserci l'attore sistema. Non è detto che l'attore debba essere una persona, puo' essere un software, un hardware, qualsiasi cosa, purche' fuori dal sistema.
C'è solo un caso in cui l'attore puo' essere quasi il sistema: quando dobbiamo gestire delle funzionalita' non legate ad una persona, per esempio "fare un backup". Regola: tutti gli use case devono essere associati ad un attore. Lo use case "fai backup" che attore ha? Ha come attore il sistema? Quasi, ma non esattamente. Lo use case:
1. o viene associato a chi beneficia dello use case, in questo caso l'admin,
2. o viene associato a chi scatena lo use case, in questo caso il clock di sistema, perche' e' il clock di sistema che fa partire il backup,
3. o viene associato al sistema, ma è una scelta sconsigliata. E' meglio non avere mai l'utente sistema.

RELAZIONI DELLO USE CASE DIAGRAM
--------------------------------

Riassunto: fin'ora, gli ingredienti di uno use case diagram sono:
- attore,
- use case,
- relazioni.

RELAZIONI

- Relazione tra attore e use case.
Relazione semplice, non direzionata, non tratteggiata, tra attore e use case.

- Relazione tra attori.
Relazione direzionata, tra due attori (detta generalizzazione). A->B vuol dire che gli use case di B possono essere fatti anche da A, cioeè "A generalizza B". E' l'unica relazione permessa tra attori.

- Relazione tra use case.
E' tratteggiata (qualche notazione la mette continua) e direzionata. Puo' essere l'inclusione o l'estensione.
La generalizzazione è stata deprecata.
A-include->B vuol dire che uno step di A è un'esecuzione di B. Cioe' se eseguo A, allora prima o poi per forza eseguo B, obbligatoriamente.
L'estensione è la relazione duale.

Le relazioni servono per semplificare i diagrammi.
C'è il problema di esplosione del numero di use case. Bisogna diminuire il numero di use case perche' altrimenti il cliente non capisce.
Ci sono tecniche per gestire la crescita del numero di use case all'interno di un diagramma.
Ci sono due tecniche.

TECNICHE PER RIDURRE IL NUMERO DI USE CASE
------------------------------------------

- Fattorizzare gli use case.
- Creare dei diagrammi a pacchetto, divisi in directory.
Il sistema quindi è diviso in piu' diagrammi.

FATTORIZZARE GLI USE CASE
Bisogna ridurre il numero di use case. Come? Usando l'include, l'extend e l'accorpamento.
Per esempio, posso unire due use case e fondendoli, generalizzarli e ottenere un unico use case un po' piu' generale.
La difficolta' e' trovare il bilanciamento tra dettaglio e astrazione.
Regola d'oro: quando si va dal cliente, non bisogna spaventarlo o confonderlo.

ALTRA POSSIBILITA'
Si possono creare due use case diagram, uno strategico (di alto livello, che verra' presentato all'untente finale e firmato dall'utente finale) e uno di sistema (piu' nel dettaglio). L'ordine puo' essere invertito.
Eventualmente, con l'utente si puo' vedere anche il diagramma di sistema.

CREARE PACCHETTI

Le tecniche possono essere usate anche contemporaneamente.

ESEMPIO
Come si fanno a individuare i pacchetti?
I pacchetti devono essere elementi distinti del diagramma. Come si individuano?
Si cercano le componenti connesse, che corrispondono alle componenti indipendenti.
Se per esempio due componenti comunicano solo attraverso uno use case, psso duplicare lo use case e ottenere quindi due componenti connesse (artificiosamente ma con poco sforzo).
All'interno di ciascun package c'è uno use case diagram.
Suggerimento: se fin dalle prime fasi riusciamo ad definire un software modularizzabile, potremmo essere facilitati durante lo sviluppo futuro.


Riassunto: i passi per ridurre il numero di use case sono i seguenti, in ordine:
1 - mega use case diagram
2 - si riducono gli use case usando include, extend, accorpamento
3 - si divide in pacchetti, eventualmente forzando
4 - si fanno due livelli di use case diagram: strategico e di sistema.

Mai presentarsi dal cliente con troppi use casi.

ESERCIZIO. E' un esercizio da esame.
Previsione: all'inizio ci sono 25 use case. Successivamente si riduce il loro numero. In teoria non serve arrivare alla pacchettizzazione.
Consegna: costruire un editor grafico. I grafici devono avere nodi, archi, commenti. L'utente costruisce grafici. I nodi e gli archi possono avere etichette. L'utente puo' aggiungere, togliere e muovere nodi e archi. Per aggiungere un arco, l'utente deve selezionare il punto di partenza e il punto di arrivo. Gli archi possono essere direzionali, non direzionali o bidirezionali. Quando muovo un nodo, il diagramma muove anche gli archi connessi al nodo. I commenti possono essere messi ovunque. Quando l'utente seleziona il commento, il cursore cambia da freccia a I-beam.

Soluzioni dell'esercitatore:
1 - Ha pochi use case. Non c'è il caso d'uso 'muovi arco' perchè è un sottocaso di 'muovi nodo'. Non posso cambiare la direzione dell'arco dopo averlo creato.
2 - E' una soluzione un po' piu' organizzata. Ci sono meno dettagli. Con 'elemento' si intende un oggetto qualsiasi.

LEZIONE
=======

Fin'ora abbiamo visto la fase di acquisizione dei requisiti.
Gli use case diagram servono per la raccolta dei requisiti.

Parliamo di fase di design.
Vediamo altri tipi di diagrammi: sequence, state, classi (che è il diagramma principe del design).

SEQUENCE DIAGRAM
----------------

Nello use case diagram non bisogna inserire il tempo, è solo una fotografia, non bisogna inserire le sequanze delle azioni.
Il sequence diagram specifica la successione delle azioni. A volte viene messo nel documento dei requisiti.
Il sequance mostra come evolve il sistema nel tempo, e come collaborano tra loro i vari oggetti.

Esempio. Come funziona una telefonata.
Il tempo scorre verso il basso. Le colonne sono gli oggetti. Le frecce orizzontali sono le azioni, dette 'messaggi'. I messaggi possono avere degli attributi: condizioni, iterazioni; ma non sono molto usate.

Come passare da use case diagram a sequence case diagram?
- trasformare gli attori in oggetti,
- trasformare gli use case in messaggi.

ESERCIZIO.
Prendiamo lo use case del ristorante e costruiamo il sequence diagram.
La prima cosa da fare è trasformare meccanicamente attori in oggetti e use case in messaggi.

Normalmente, non basta descrivere la sequenza ideale, serve descrivere anche le varianti. Quindi serve un altro tipo di diagramma: lo state-machine/activity diagram.
Sono due diagrammi ma sostanzialmente sono la stessa cosa.

STATE DIAGRAM
-------------

Elenca gli stati del sistema e i passaggi da uno stato all'altro. Le transizioni sono associate a delle condizioni, ed eventualmente ad altre azioni.

Con questo diagramma posso andare ad un livello altissimo di dettaglio.
Vengono gestiti anche i casi in cui qualcosa non funziona.

Il sequence descrive cosa succede quando tutto va bene.
Lo state aggiunge dettagli riguardanti quando qualcosa va storto.

Lo state diagram ha un fratello quasi gemello: l'activity diagram.

ACTIVITY DIAGRAM
----------------

E' uguale allo state ma con qualche funzione i piu'
Le funzioni in piu' sono:
- fork (barra nera): lancio in parallelo piu' task
- join (barra nera):  il processo viene lanciato solo dopo che tutti i processi specificati sono terminati
- decisione (rombo): è un modo per rimarcare una possibile scelta tra piu' opzioni.

E' possibile, a differenza dello state, aggiungere delle swimlanes (corsie) per evidenziare dal punto di vista grafico chi fa che cosa.
Ogni corsia rappresenta un oggetto. All'interno della corsia sono rappresentate le attività dell'oggetto.

-----------------

Quando usare sequence e quando usare activity?
Sequence: propone una descrizione dell'intero progetto. Descrive l'utilizzo ideale del sistema, senza errori o variazioni.
Activity: normalmente viene fatto solo per una parte del sistema, perchè permette di andare molto piu' nel dettaglio. Descrive anche errori e variazioni dell'uso ideale del sistema.

ESERCIZIO.
In un esercizio precedente abbiamo fatto il sequence diagram del ristorante.
Ora, partendo dal sequence, fare l'activity. Dobbiamo aggiungere tutte le varianti possibili.

LEZIONE
=======

In generale.
------------
Adesso siamo nella fase di design.
Prima eravamo nella fase dei requisiti.
C'è una fase di transizione da COSA a COME, non c'è una distinzione netta. Si usano activity diagram e sequence diagram per eseguire la transizione da COSA a COME.
Si ragiona a passate: di ragione per raffinazioni successive.
Il provare a fare l'activity diagram porta a farsi molte domande. E' giusto e bisognerebbe che fosse così, perchè vuol dire che stiamo facendo l'attività giusta.

Sequence diagram: esecuzione ideale del programma, senza problemi.
Activity diagram: descrivo tutto quello che puo' succedere, anche i problemi.



Esercizi.
---------
Vediamo le soluzioni degli esercizi della volta scorsa.

Activity diagram per il ristorante.
-----------------------------------
Ci sono piu' flussi. C'è l'evoluzione del flusso base ideale, che è quello del sequence diagram. Ma ci sono anche altri flussi: per esempio il caso in cui il tavolo non è disponibile.
Attenzione: se il tavolo non è disponibile, il flusso termina. Questa è una decisione di design. Potevo fare altre cose: per esempio potevo creare un'attivita' del tipo "cerca date successive (a quella chiesta dal cliente) in cui il tavolo e' disponibile".
Questo activity diagram è ababstanza complesso ma non è esaustivo, non gestisce tutti i casi possibili. Per esempio gestisce male il caso in cui il tavolo non è disponibile, oppure gestisce male il caso in cui la pietanza non e' disponibile (anche se non c'è la pietanza non c'è, viene lo stesso confermato l'ordine: il design rappresentato dal diagramma è sbagliato, devo prevedere un flusso uscente da "verifica disponibilita' pietanza" in piu', che torni per esempio a "ordina pietanza").
Si potrebbero invertire "verifica disponibilità pietanze" e "ordina pietanze", cioè eseguire prima "verifica disponibilità pietanze" e dopo "ordina pietanze". E' una scelta di design. Creare questo diagramma aiuta a fare scelte di design, cioè scelte di questo tipo.
Un'altra mancata gestione: non si possono fare altri ordini che vadano nello stesso scontrino.
Mancata gestione: se uno modifica l'ordine, non viene spiegato cosa succede all'ordinazione precedente che e' stata modificata. C'è il rischio che nello scontrino ci siano entrambe le ordinazioni. Bisogna evidenziare il fatto che il piatto precedente venga cancellato. Prima di "ordinare pietanze" dovrebbe esserci "modifica della lista delle cose ordinate".
Tipicamente non è prevista l'attività "attendi", non si usa.
L'activity diagram dovrebbe avere al piuì 10 attività.

DESIGN ARCHITETTURALE
---------------------
Entriamo in questa fase.
Vediamo il diagramma UML principe per la fase di design: il class diagram.

Ripasso.
Le fasi di sviluppo software: requisiti, design, implementazione.
Lo use case è in requisiti.
Il sequence e activity sono in parte in requisity e in design.
Il class è in design e implementazione, e in parte in requisiti. E' di moda usare le classi anche per i requisiti, ma è una cattiva moda, da evitare.

DIAGRAMMA DELLE CLASSI.
-----------------------
E' costituito dalle classi (rettangoli con tre campi), dalle associazioni (linee) e dagli estremi delle associazioni.
All'interno della classe abbiamo: nome, attributi, operazioni. Il livello di dettaglio e' arbitrario, lo decidiamo noi.
Le relazioni: non basta una linea, vanno aggiunte delle informazioni:
- nome (poco importante),
- navigabilità (o direzionalita') (possiamo anche ignorare questa informazione, non è molto importante, serve solo per sapere come leggere il diagramma, cioè per dare una gerarchia alle classi, in modo da sapere da quale classe bisogna partire per leggere il diagramma),
- molteplicita' (importante),
- ruolo (importante).
Non conviene duplicare le associazioni per inserire anche l'inversa: con un'unica associazione definiamo entrambe le direzioni, giocando bene sulla molteplicita' e sul ruolo.
Molteplicita' e ruoli possono essere messi in entrambe le direzioni.

OPERATIVAMENTE.
---------------
Come si costruisce il class diagram?
1 - Identificare le classi.
Se abbiamo lo use case diagram, ciascun elemento diventa una classe: sia attori che use case. E poi si raffina.
Se abbiamo il documento dei requisiti, si prendono tutti i termini.
2 - Arricchire le classi.
Cioè definire gli attributi e i metodi.
3 - Stabilire le associazioni.
Bisogna capire se due classi hanno qualcosa in comune, interagiscono tra loro, una contiene l'altra, una legge informazioni dall'altra, eccetera.

Nella fasi di implementazione, possono essere aggiunti dettagli (attributi, metodi) a quello che c'è nel diagramma delle classi. Non bisogna stravolgere il diagramma delle classi, perchè è stata creata in quel modo per motivi di design, e non dobbiamo modificare il design.

NOTA. Tutto quello che scriviamo nel diagramma delle classi viene generato automaticamente nel linguaggio ad oggetti che specifichiamo, da dei tool appositi.

ESEMPIO. Nel nostro esempio (il primo), perchè c'è la classe Work? Cos'è la classe Work? Per capirlo, guardiamo le molteplicita'. Spiegazione: un utente puo' essere assegnato a piu' attivita' ma in un determinato momento puo' svolgerne solo una.
Caratteristica: con questo design, ad un Work puo' lavorare un solo lavoratore, non piu' di uno.

ESERCIZIO.
----------
Esaminare il diagramma delle classi (il secondo esempio). Trovare a cosa servono le classi.

ESERCIZIO.
----------
Creare il diagramma delle classi massimizzando coesione e minizzando accoppiamento.







































