
PRIMA LEZIONE
=============

Insegnante: Mattia Salnitri.

Programma della lezione.
Oggi faremo esercizi su javascript.
Prima parte: vedere github.
Seconda parte: svolgere un esercizio di javascript.

Esempi: github, gitlab.
Servono per: gestire progetti, organizzare il codice, tracciare il codice, lavorare con molti programmatori.

Ci sono 3 tipi di branch dal punto di vista del significato:
master: quello principale, quello di release
staging: faccio i test
development: creo nuovo codice.
Esempio: ho il master, faccio un branch staging di una nuova funzionalita', faccio un sottobranch development dove scrivo il codice. Quando il codice è sufficiente, lo mergo in staging e qualcuno lo sottopone a test, mentre io intanto potrei andare avanti col development. Quando lo staging è soddisfacendte, si merge nel master.

COMANDI:

$ gir push origin master
origin: locale (sorgente)
master: server (target)

$ git branch <nome_branch>
crea un nuovo branch

$ git checkout <nome_branch>
passa al nuovo branch

$ git commit -m "<messaggio>"
committa usando il messaggio specificato

$ git commit -a
commita tutti i file, anche quelli non addati

$ git merge <nome_branch>
mergia il branch specificato nel branch corrente

$ git branch -d <nome_branch>
cancella il branch specificato

$ git diff <branch_1> <branch_2>
mostra le differenze tra i due branch

$ <branch>^^^
è lo versione del branch 3 commit prima

$ git log
mostra i commit

$ <hash> <file>
è la versione del file corrispondente al codice hash specificato

ESERCIZIO.
Ho un magazzino.
Posso ordinare una certa quantità di un certo tipo di item.
Devo specificare il tipo e la quantita', e l'ordine viene aggiunto a una tabella.
Per questo esercizio non cancellare i branch.
Nome della repository: SE2_16_matricola_L2.
Aggiungere come collaboratore: MattiaSalnitri.
Separiamo il front-end dal back-end.
Aggiungere la funzionalità: un bottone "update storage space", che modifica il numero massimo di oggetti (per ogni tipo indifferentemente dal tipo).
Se il numero di oggetti è superiore, il numero viene aggiunto lo stesso alla tabella ma compare un pop-up di warning.

JAVASCRIPT. Suggerimenti.

document.getElementById
crea un elemento javascript che fa riferimento alla pagina html, all'oggetto con l'id specificato.

.rows.length
da' il numero di riga

.deleteRow
cancello una riga

.insertRow
inserire una riga

.insertCell
inserire una cella in una determinata riga

.innerHTML
scrivere in uan cella

.style.display = 'none'
nascondere l'elemento

.style.display = 'block'
vedere l'elemento

SECONDA LEZIONE
===============

Programma.
Oggi vedremo un linguaggio basato su javascript: node.js.
Mentre la lezione scorsa eravamo dal lato client, oggi siamo dal lato server.

NODE.JS
E' un linguaggio asincrono. Dei pezzi di codice vengono attivati quando è richiesto, non c'è un while() che aspetta che arrivi l'input.

COMANDI

$ node
apre una console di javascript

$ console.log(<variabile>)

$ .exit
$ ^C ^C
esce dalla console

$ node <node.js_script>
esegue il file

Nota. In locale, posso scrivere una porta qualsiasi e sul browser accedere all'indirizzo di quella porta.

BRACKETS: editor per scrivere html, css, js.

NPM. E' un programmino utile.

$ npm init
è un programma interattivo. Chiede:
- il nome del progetto
- la versione
- la descrizione
- il main
- text command lo lasciamo stare per il momento
- repository non ci interessa per il momento
- keywords dipende da noi
- autore
- licenza
Produce una mappa dentro ad un file.

TEMPLATE.
Vogliamo dividere le due parti.
Abbiamo un template html. L'estensione è .tpl.
L'obiettivo è non chiamare le robe direttamente ma fornire una specie di interfaccia in modo che il codice sia piu' elegante e maneggevole.

$ npm install bind --save
installa la cartella bind in locale
se c'è --save aggiunge la libreria al package di jason

BIND: è una libreria. E' utile da usare. Si usa dentro a un .tpl.

Ci sono due tipi di passaggi di parametri dal browser all'applicatzione:
- get: scrive i parametri nell'url
- post: li codifica nel flusso dati (piu' sicuro per username e password)

GET
Il server viene chiamato con una stringa che identifica le variabili, che va parsata. C'è una libreria che parsa. I valori parsati li agganciamo ad un oggetto.

Invece di usare createserver usiamo una libreria piu' completa, che è express.
Creo express, gli dico la porta con set, gli dico il contenuto del server con get, gli dico di ascoltare con listen. Post vedremo dopo a cosa serve.

Come far comunicare in modo piu' semplice e strutturato l'applicazione. Per inviare da lato client a lato server delle strutture complesse serve json.

LEZIONE
=======

NPM
---

Lo spieghiamo.

L'NPM è un comando aggiuntivo di node per installare librerie aggiuntive.
Per esempio quando abbiamo
var express = require('express');
abbiamo una libreria aggiuntiva.
($ npm init) crea un file json che contiene metadati sul progetto e le dipendenze della libreria.

Esempio d'uso:
($ npm init) chiede in modo interattivo i dati:
(entry point) è dove mettiamo il codice di node, per esempio index.js.
Alla fine viene creato il file package.json.
($ npm init --yes) crea un file di default, senza parte interattiva.

($ npm install express --save) installa la libreria e inserisce anche le dipendenze.

E' meglio mettere in .gitignore "node", in modo da ignorare la cartella node_modules, che contiene tutte le librerie scaricate. Sara' il server a scaricare le librerie da cui si dipende, non dobbiamo metterle noi nella repository (lo vedremo piu' avanti).

NODE
----

L'ultima volta abbiamo visto node.
Abbiamo visto come inviare e ricevere parametri.

app.use viene chiamato ogni volta che c'è la richiesta.
Al posto di app.use si puo' mettere app.get o app.post e distinguere i due casi: quando viene inviata o quando viene richiesto qualcosa.

Come inviare oggetti json al server.
------------------------------------

PARTE CLIENT.
Il bottone non è submit, ma richiama la funzione send.
Questo perchè vogliamo processare le cose.

SEND. Prendiamo la variabile del form, collezioniamo tutti i parametri del form.
(var xhr): invece di mandare le cose come un form, creiamo un oggetto che invia il flusso di informazioni al server: sostanzialmente stiamo riscrivendo il submit.

(JSON.stringify(data)): formatta l'oggetto in termini di json.
(xhr.send): inviamo il file json al server.

Leggere l'oggetto json dal server.
----------------------------------

(xhr.onloadend).
Prendi la risposta e immagazzinala.

Guardiamo index.js.
-------------------

headers["Access-Control-Allow-Origin"]: permette di ricevere oggetti di tipo diverso.

"application/json": è il formato di risposta. Adesso usiamo il tipo json, non per esempio le stringhe.

app.use(bodyParser...): bodyParser è una libreria esterna che permette di interpretare quello che riceviamo. Qui stiamo dicendo che il flusso delle informazioni che arriva deve essere interpretato come json.

var otherArray: oggetti normalissimi.
var json: oggetto json.
JSON.stringify: trasforma in formato json.
response.end(json): spediamo l'oggetto json.

Esempio:
--------
($ node index.js)
Successivamente in html premiamo "SEND JSON" e poi vediamo che arrivano i dati.

ESERCIZIO
---------

Realizzare un'applicazione per fare management di impiegati. Non c'è il client server, si fa tutto su node.js.
I dipendenti hanno un ID. Si puo' cercare l'utente con un certo ID, e devono essere stampati i suoi dati.
Se l'Id non c'è non si lamenta ma mi fa vedere che non ci sono dati.
Dati: nme, cognome, livello, salario.
Bottone "INSERISCI DIPENDENTE" che inserisce l'ID con i dati specificati.
Posson modificare i dipendenti, direttamente: tutto è nella stessa schermata.
Bottoni: "cerca dipendente", "rimuovi dipendente", "inserisci dipendente".
Se non metto l'ID, mi deve inserire i dati associati al primo ID libero.
Se inserisco due ID uguali, sovrascrive i dati (cioè li modifica).

Suggerimenti:
- non mettersi subito a programmare, ma pensiamo a quello che dobbiamo fare. Dobbiamo seguire il model-view control. La parte di model deve essere in un file separato, che fa la gestione dei dati. Per la parte di view abbiamo il template. Per la parte di control abbiamo index.js.
Quindi ci sono 3 parti: model, view, control.
- creiamo un nuovo oggetto nella parte di model con le robe che srvono per il template, invece di mettere tutto in index.js. E lo passiamo a index.js come variabile.
- "mostra/nascondi scheda" è nel lato client, quindi deve esserci uno script nel lato client. Non lo dobbiamo mettere in lato client ma in un file a parte che viene preso dal server. Il server deve poter inviare lo script al client. Tuttavia: è meglio evitare di esporre le strutture delle nostre cartelle interne, quindi quando passiamo lo script li mettiamo tutti nella stessa cartella nel client. Quindi quando il client accede a /scripts in realtà il server invia lo script /...path_interno.../script.

(app.use(a, b)): quando viene richiesta a, viene eseguita b.
E' una specie di remap di b in a.

LEZIONE
=======

ESAME
-----
Scritto e orale.
Teoria e pratica.
Scritto: scrittura del codice.
Pratica: mvc, testing, deploy su eroco. Lato client, lato server.
Cose importanti da fare per la pratica: deployment su eroco, usare gitlab in modo sensato, usare javascript design pattern (mvc), definizione dell'api, test case, code review.
Bisogna realizzare l'applicazione di Michela per l'esame. Non deve essere completa, perchè questo non è un corso di programmazione, ma deve essere corretta dal punto di vista dei metodi e delle regole viste a lezione.

ESERCIZIO
---------
Realizzare l'applicazione per Michela. Front-end e back-end seguendo le tecniche e le regole imparate a lezione.

FARE DEPLOY DI UN'APPLICAZIONE
------------------------------

Oggi parleremo di questo.

Ci sono vari servizi per la creazione di server. Noi useremo Heroku. Serve per creare server node.js.

Creare un nuovo progetto su github, clonarlo in locale sulla nostra macchina.

Per usare Heroku dobbiamo togliere il proxy nelle nostre macchine. Ma in teoria è già tolto.

($ heroku --version) per installare, aggiornare e vedere la versione di heroku.
Andiamo nella cartella di git locale e digitiamo ($ heroku create): in questo modo associamo la repository all'account di heroku. In altre parole, nella nostra cartella locale abbiamo due repository coincidenti: quella di github e quella di heroku.
($ more .git/config) qui vediamo i dettagli del server git di heroku.

Creiamo due branch: test e dev.

Nota: i branch master, test, dev non devono essere necessariamente incatenati: possono essere paralleli, per esempio creo test e dev indipendentemente, e dopo faccio git push origin dev per spostare la roba da test a dev.

$ npm init
creiamo il nostro package.json per la nostra applicazione node.js

Modifichiamo il file json per heroku. Aggiungiamo ("start": "node index.js"), che è il comando per far partire il server.

origin è il nome del repository su github (dato di default in .git/config).
Pushamo su dev.
Ci spostiamo su test. Mergiamo dev in test. Facciamo eventuali test.
Pushamo test.

Adesso siamo sicuri che l'applicazione va, e vogliamo fare il deploy.
Intanto mettiamo tutto su master.

($ git push <repository> <branch>)

Vogliamo fare il deployment su heroku.

($ git push heroku master): pushamo non su github ma su heroku.

($ heroku ps:scale web=1) crea il server.
Adesso abbiamo fatto il deployment. Per vedere se funziona facciamo ($ heroku open): questo apre la pagina web.

Se ci sono errori scriviamo ($ heroku logs --tail) e vediamo il log.

Creiamo un file "Procfile" con contenuto "web: node index.js".

Per testare il locale: ($ heroku local web).












































